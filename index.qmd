---
title: "How far can you really see the drone?"
format: 
  html:
    code-fold: true
execute:
  warning: false

editor: visual
---

## Introduction
Maintaining visual line of sight (VLOS) of a drone is a fundamental requirement under 14 CFR Part 107, which governs the commercial use of small unmanned aircraft systems (sUAS) in the United States. According to these regulations, drone pilots (or their visual observers) must always be able to see their aircraft unaided by any device other than corrective lenses. This requirement serves as a critical safety measure: by keeping the drone in sight, operators can better avoid collisions with buildings, power lines, or other aircraft, and can respond more quickly to unexpected events or emergencies.

In practical terms, “visual line of sight” means that the operator or observer can clearly identify the drone’s orientation and location in real time. While this may sound straightforward, factors such as distance, weather conditions, obstacles, and lighting can all compromise VLOS. Consequently, ensuring VLOS compliance across varying operational scenarios is not always a simple task.

Despite its importance, relatively little research has been dedicated to developing systematic methods to estimate or verify VLOS. Most current industry practices rely on manual observation and conservative flight planning to ensure the drone remains within sight, but these approaches can be subjective and prone to human error. 

```{r, echo=FALSE, warning=FALSE}
library(ggplot2)
library(plotly)
library(readxl)
library(pROC)
library(dplyr)
```

```{r echo=FALSE}
#' Calculate Minimum Visibility
#'
#' This function calculates the minimum visibility distance given a size of the drone (2D dimensions), an altitude and the desired acuity (in arc minutes).
#'
#' @param size A numeric vector of length 2, representing size dimensions (x and y).
#' @param alt A numeric value representing the altitude.
#' @param acuity A numeric value representing the desired acuity (in arc minutes)
#' @return The minimum visibility distance as a numeric value.
#' @examples
#' calculateMinimumVisibility(c(10, 20), 50, 6)
calculateMinimumVisibility <- function(size = c(4.2,11.3) , alt=50, acuity=6) {
  # Input validation
  if (!is.numeric(size) || length(size) != 2) {
    stop("Invalid input: 'size' must be a numeric vector of length 2.")
  }
  if (!is.numeric(alt) || length(alt) != 1) {
    stop("Invalid input: 'alt' must be a single numeric value.")
  }
  if (!is.numeric(acuity) || length(acuity) != 1) {
    stop("Invalid input: 'acuity' must be a single numeric value.")
  }
  
  #Extract
  x <- size[1]/12 # Convert inches to ft
  y <- size[2]/12 # Convert inches to ft
  minT <- acuity / 60 * pi / 180 # Convert arcminutes to radians
  
  # Initialize variables
  theta_c <- 1
  distance <- 0
  #What is the largest value that distance can be before the viewing angle of the drone drops below the target acuity
  while (theta_c > minT) {
    # Check in increments of 2
    distance <- distance + 2
    a <- c(distance - y / 2, alt + x / 2)
    b <- c(distance + y / 2, alt - x / 2)
    
    # Compute the dot product and norms
    num1 <- sum(a * b)
    den1 <- sqrt(sum(a^2)) * sqrt(sum(b^2))
    
    # Calculate the angle
    theta_c <- acos(num1 / den1)
  }
  # Return the distance
  return(distance)
}
```

```{r echo=FALSE}
#' Calculate VLOS based on EASA Guidelines (Oct 2024) 
#'
#' This function calculates VLOS using the EASA Guidelines (https://www.easa.europa.eu/en/downloads/139435/en)
#'
#' @param size A numeric vector of length 2, representing size dimensions (x and y).
#' @param fixedWing A boolean representing whether the drone is a fixed-wing type drone
#' @return The minimum visibility distance as a numeric value.
#' @examples
#' calculateEUDronePortVLOS(c(10, 20), FALSE)
calculateEASAVLOS <- function(size = c(4.2,11.3) , fixedWing = FALSE) {
  # Input validation
  if (!is.numeric(size) || length(size) != 2) {
    stop("Invalid input: 'size' must be a numeric vector of length 2.")
  }
  if (!is.logical(fixedWing) || length(fixedWing) != 1) {
    stop("Invalid input: 'fixedWing' must be a logical vector of length 1.")
  }
  
  
  #Extract
  x <- size[1]/12 # Convert inches to ft
  y <- size[2]/12 # Convert inches to ft
  
  
  # Meter conversion
  m2ft <- 3.280839895
  
  distance <- 0
  
  if (fixedWing){
    CD <- max(x,y)
    distance <- 490*m2ft*CD/m2ft + 30*m2ft
  } else {
    CD <- sqrt(max(x,y)^2+max(x,y)^2)
    distance <- 327*m2ft*CD/m2ft + 20*m2ft
  }
  
  
  return(distance)
}
```

```{css echo=FALSE}
/* Container for the input form */
body {
  font-family: 'Roboto', sans-serif;
}

/* Container for the input form */
.input-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  gap: 20px; /* Space between input groups */
}

.input-group {
  display: flex;
  flex-direction: column;
  flex: 1; /* Allow input groups to expand evenly */
}

.input-group label {
  display: flex;
  font-size: 14px;
  align-items: center;
  margin-bottom: 5px;
  font-weight: 600;
  color: #333;
}

.input-group label i {
  margin-right: 5px;
  color: #007BFF;
}

.input-group input,
.input-group select {
  padding: 8px 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 12px;
  transition: border-color 0.3s, box-shadow 0.3s;
  max-width: 120px; /* Restrict width */
}

.input-group input[type="number"] {
  width: 100%;
}

.input-group input:focus,
.input-group select:focus {
  border-color: #007BFF;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
  outline: none;
}

/* Restrict number inputs to 5 digits 
.input-group input[type="number"]::-webkit-inner-spin-button, 
.input-group input[type="number"]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
}*/

.input-group input[type="number"] {
  -moz-appearance: textfield;
}

/* Responsive adjustments */
@media (max-width: 800px) {
  .input-container {
    flex-direction: column;
    max-width: 400px;
  }

  .input-group {
    width: 100%;
  }

  .input-group input,
  .input-group select {
    max-width: 100%;
  }
}

/* Helper text styling */
.input-group small {
  color: #666;
  margin-top: 5px;
  font-size: 10px;
}
```

## Understanding Visual Line of Sight
Under the Federal Aviation Administration’s (FAA) regulations, particularly 14 CFR Part 107, the concept of visual line of sight (VLOS) is defined to ensure that the remote pilot or visual observer maintains constant, unaided visual contact with the small unmanned aircraft (sUA) throughout its operation. This requirement is critical for safe flight, as it allows the operator to continuously monitor the drone’s position, orientation, and potential conflicts in the airspace.

14 CFR § 107.31 (“Visual line of sight aircraft operation”) specifies that the remote pilot in command (PIC) or the person manipulating the flight controls, as well as any visual observer (if used), must be able to observe the sUA:

- Unaided by any device other than corrective lenses. This prohibition on visual aids (e.g., binoculars, night vision goggles, or first-person view cameras alone) ensures that the aircraft can be seen in real time and in natural lighting conditions.

- Continuously throughout the entire flight. This means that at no point should the operator lose sight of the drone due to distance, obstacles, or environmental factors (e.g., clouds, fog, glare).

- With sufficient clarity to:

    1. Know the sUA’s location (e.g., latitude, longitude, or general position in the environment).
    2. Determine its altitude, attitude, and direction of flight.
    3. See and avoid other air traffic or hazards.
    4. Confirm that the sUA does not endanger the life or property of others.

::: {.callout-note appearance="simple" collapse="true"}
## EASA Guidelines - Oct 2024

In October 2024, the European Union Aviation Safety Agency (EASA) published guidelines on operations in the open and specific category (Issue 2, 04 October 2024) to supplement EU drone regulations. Included in the guidelines are calculates for ALOS and DLOS.

**Attitude Line of Sight (ALOS)**

ALOS represents the maximum distance at which the remote pilot can reliably determine the drone’s orientation (i.e., its pitch, roll, and yaw). The value depends on the drone’s size and differs by aircraft type. For example:

- Rotorcraft/multirotor: $ALOS = 327 × (CD) + 20 m$
- Fixed-wing: $ALOS = 490 × (CD) + 30 m$

Where the characteristic dimension (CD) is typically the drone’s largest measurable span (e.g., wingspan, diagonal motor-to-motor distance, etc.).

**Detection Line of Sight (DLOS)**

DLOS defines how far away the drone can be while still allowing the pilot to detect potential collisions or conflicts in the surrounding airspace. DLOS is a function of ground visibility (GV), given by:

$$DLOS = 0.3 × GV$$
Since ground visibility should be at least 5 km for most VLOS operations, DLOS adjusts based on environmental conditions such as haze, fog, or rain.

To determine an overall VLOS distance, take the smaller of the two values (ALOS or DLOS) to ensure both the drone’s orientation and any incoming hazards remain visible to the remote pilot.

:::

## Modeling Visual Range

A core principle in assessing the maximum range at which an unmanned aircraft can be visually tracked is the concept of visual acuity, often approximated as the ability to distinguish details that subtend an angle of roughly one arc minute (1/60 of a degree, or 00&#176; 01&#8242; 00&#8243;) at the eye. Under standard conditions, an individual with “normal” vision (commonly referred to as 20/20 in the United States) can discern details at this resolution. For an individual with "normal" vision, the height of every letter on the Snellen Eye Chart (@fig-snellen-chart) on the 20/20 row corresponds to 5 arc minutes (5&#8242;) when viewed at 20 ft. The angle subtended by the opening of the letter C to differentiate between the letter O is drawn to be exactly one arc minute. 

![Diagram of Snellen Acuity](snellen_chart.svg){#fig-snellen-chart width=40%}




However, drone operations require not only detection of the aircraft as a point in space, but also recognition of its orientation and possible identification of flight-critical details (e.g., changes in attitude or lights).
To incorporate both practical and safety considerations, we propose the following angular thresholds:

::: {.panel-tabset}

### 1&#8242; - Limit

This is the conventional “benchmark” for human visual acuity in ideal conditions. If a drone appears smaller than this angular size, the average observer will struggle to distinguish it from the background or discern fine details such as its orientation.

### 3&#8242; - Max VLOS

Recognizing that real-world conditions (e.g., lighting, contrast, visual distractions) are rarely ideal, our model sets 3 arc minutes as the angular size at which the drone can be more reliably perceived and tracked. At this threshold, observers should be able to identify major orientation changes (e.g., a significant turn, climb, or descent), aiding compliance with visual line of sight (VLOS) requirements.

### 6&#8242; - Safe VLOS

For critical safety operations or scenarios where the observer must rapidly respond to any change in flight status, 6 arc minutes is proposed as a practical “comfort zone.” At this size, not only is the drone’s presence and orientation clearly visible, but there is also additional margin for environmental variables (such as glare, haze, or partial obstructions).

:::

## Calculating Visual Line of Sight for Different Drone Models

The visual angle $(\theta)$ subtended by the drone’s corners can be calculated using the arc cosine function as visualized in @fig-drone-dist. The two relevant drone corners are:

$$A = \left( dis - \frac{w}{2}, alt + \frac{h}{2} \right), \quad B = \left( dis + \frac{w}{2}, alt - \frac{h}{2} \right)$$
Using the **arccosine formula** to solve for the angle between two vectors:

$$\theta = \arccos \left( \frac{\mathbf{A} \cdot \mathbf{B}}{\|A\|\|B\|} \right)$$ {#eq-visual-angle}

where:

- $dis$ = horizontal distance to the drone,
- $alt$ = altitude of the drone,
- $w$ = drone width,
- $h$ = drone height,


Given a drone's width, height, and desired \theta, varying the altitude from 0 to 400 ft allows for solving for the estimated distance. 

::: {#fig-drone-dist}
```{=html}
<svg width="600" height="350" viewBox="0 0 600 350" xmlns="http://www.w3.org/2000/svg">
    <!-- Axes -->
    <line x1="50" y1="300" x2="550" y2="300" stroke="black" stroke-width="4" marker-end="url(#arrow)"/>
    <line x1="50" y1="300" x2="50" y2="50" stroke="black" stroke-width="4" marker-end="url(#arrow)"/>
    
    <!-- Arrows -->
    <defs>
        <marker id="arrow" markerWidth="4" markerHeight="4" refX="2" refY="2" orient="auto-start-reverse" markerUnits="strokeWidth">
            <path d="M0,0 L4,2 L0,4 z" fill="black" />
        </marker>
    </defs>
    
    <!-- Drone Rectangle -->
    <rect x="350" y="150" width="100" height="50" stroke="black" stroke-width="4" fill="none"/>
    
    <!-- Center Circle -->
    <circle cx="400" cy="175" r="5" fill="none" stroke="black" stroke-width="2"/>
    
    <!-- Vertical Line from Circle to X-axis -->
    <line x1="400" y1="175" x2="400" y2="300" stroke="black" stroke-width="2" stroke-dasharray="5,5"/>
    
    <!-- Horizontal Line from Circle to Y-axis -->
    <line x1="400" y1="175" x2="50" y2="175" stroke="black" stroke-width="2" stroke-dasharray="5,5"/>
    
    <!-- Perspective Lines -->
    <line x1="50" y1="300" x2="350" y2="150" stroke="black" stroke-width="2"/>
    <line x1="50" y1="300" x2="450" y2="200" stroke="black" stroke-width="2"/>
    <line x1="350" y1="150" x2="450" y2="200" stroke="black" stroke-width="2" stroke-dasharray="5,5"/>
    
    <!-- Drone Width and Height Labels -->
    <line x1="350" y1="140" x2="450" y2="140" stroke="black" stroke-width="2"/>
    <text x="390" y="130" font-size="14">Drone Width</text>
    <line x1="460" y1="150" x2="460" y2="200" stroke="black" stroke-width="2"/>
    <text x="470" y="175" font-size="14">Drone Height</text>
    
    <!-- Visual Angle -->
    <path d="M83 283 A20 20 0 0 1 90 290" fill="none" stroke="black" stroke-width="2"/>
    <rect x="100" y="278" width="100" height="18" fill="white" stroke="none"/>
    <text x="102" y="290" font-size="14">θ - Visual Angle</text>
    
    <!-- Axis Labels -->
    <text x="270" y="330" font-size="16">Distance</text>
    <text x="0" y="130" font-size="16" transform="rotate(-90, 50, 140)">Altitude</text>
</svg>


```
Estimating the angle subtended by the drone
:::

An example of @eq-visual-angle for a multi-rotor drone (Autel Evo II v3) and a fixed-wing drone (AgEagle eBee) can be found below. A third panel provides the user with an interactive UI to enter in an arbitrary drone size and type for analysis.

::: panel-tabset
## Autel Evo II v3 Example

```{r echo=FALSE}
# Define parameters
x <- 4.33
y <- 13.9
size <- c(x, y)
drone_type = FALSE

# Define maximum altitude
maxAlt <- 400  # Replace 400 with your desired maximum altitude

# Define acuity
acuity_safe <- 6
acuity_max <-3
acuity_bad <-1

# Preallocate lines
safe_D <- numeric(maxAlt)
max_D <- numeric(maxAlt)
bad_D <- numeric(maxAlt)

# Loop through altitudes and compute minD
for (alt in 1:maxAlt) {
  safe_D[alt] <- calculateMinimumVisibility(size, alt, acuity_safe)
  max_D[alt] <- calculateMinimumVisibility(size, alt, acuity_max)
  bad_D[alt] <- calculateMinimumVisibility(size, alt, acuity_bad)
}

# Calcualte EU Drone Port
distance_EU = calculateEASAVLOS(size,drone_type)

# Create a data frame
data_safe <- data.frame(
  distance = safe_D,
  altitude = 1:maxAlt
)

# Create a data frame
data_max <- data.frame(
  distance = max_D,
  altitude = 1:maxAlt
)

# Create a data frame for plotting
data_bad <- data.frame(
  distance = bad_D,
  altitude = 1:maxAlt
)

# Create an interactive plot
plotly_plot <- plot_ly(
    data_safe, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name = "Safe Distance",
    line=list(color="green")
    ) %>%
  add_trace(
    data = data_max, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name="Max Distance",
    line=list(color="blue")
    ) %>%
  add_trace(
    data = data_bad, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name="Limit of Human Vision", 
    line=list(color="red")
    ) %>%
  add_trace(
    x = c(distance_EU, distance_EU), 
    y = c(0, 400),  # Vertical line coordinates
    type = 'scatter', mode = 'lines',
    name = "EASA Guidelines",  # Legend label
    line = list(color = "black", dash = "dash", width = 2)
    ) %>%
  layout(
    title = "Visual Line of Sight Estimator",
    xaxis = list(title = "Minimum Distance"),
    yaxis = list(title = "Altitude", range=c(0,400)),
    legend = list(
      orientation = "h",  # Horizontal legend
      x = 0.5,            # Centered horizontally
      y = -0.2,           # Positioned below the plot
      xanchor = "center"  # Align the legend horizontally
    ),
    margin = list(l = 50, r = 50, b = 100, t = 50)
  )

plotly_plot
```

While the EASA guidelines suggest a max visibility range of `r round(distance_EU)` ft, the use of visual acuity presents a recommended distance of no more than `r max(max_D)` ft with the limit of the average human's vision at `r max(bad_D)` ft.

## AgEagle eBee Example

```{r echo=FALSE}
# Define parameters
x <- 4.3
y <- 45.7
size <- c(x, y)
drone_type = TRUE

# Define maximum altitude
maxAlt <- 400  # Replace 400 with your desired maximum altitude

# Define acuity
acuity_safe <- 6
acuity_max <-3
acuity_bad <-1

# Preallocate lines
safe_D <- numeric(maxAlt)
max_D <- numeric(maxAlt)
bad_D <- numeric(maxAlt)

# Loop through altitudes and compute minD
for (alt in 1:maxAlt) {
  safe_D[alt] <- calculateMinimumVisibility(size, alt, acuity_safe)
  max_D[alt] <- calculateMinimumVisibility(size, alt, acuity_max)
  bad_D[alt] <- calculateMinimumVisibility(size, alt, acuity_bad)
}

# Calcualte EU Drone Port
distance_EU = calculateEASAVLOS(size,drone_type)

# Create a data frame
data_safe <- data.frame(
  distance = safe_D,
  altitude = 1:maxAlt
)

# Create a data frame
data_max <- data.frame(
  distance = max_D,
  altitude = 1:maxAlt
)

# Create a data frame for plotting
data_bad <- data.frame(
  distance = bad_D,
  altitude = 1:maxAlt
)

# Create an interactive plot
plotly_plot <- plot_ly(
    data_safe, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name = "Safe Distance",
    line=list(color="green")
    ) %>%
  add_trace(
    data = data_max, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name="Max Distance",
    line=list(color="blue")
    ) %>%
  add_trace(
    data = data_bad, 
    x = ~distance, 
    y = ~altitude, 
    type = 'scatter', 
    mode = 'lines', 
    name="Limit of Human Vision", 
    line=list(color="red")
    ) %>%
  add_trace(
    x = c(distance_EU, distance_EU), 
    y = c(0, 400),  # Vertical line coordinates
    type = 'scatter', mode = 'lines',
    name = "EASA Guidelines",  # Legend label
    line = list(color = "black", dash = "dash", width = 2)
    ) %>%
  layout(
    title = "Visual Line of Sight Estimator",
    xaxis = list(title = "Minimum Distance"),
    yaxis = list(title = "Altitude", range=c(0,400)),
    legend = list(
      orientation = "h",  # Horizontal legend
      x = 0.5,            # Centered horizontally
      y = -0.2,           # Positioned below the plot
      xanchor = "center"  # Align the legend horizontally
    ),
    margin = list(l = 50, r = 50, b = 100, t = 50)
  )

plotly_plot
```

The variation is significant when comparing results for fixed-wing UAS. The EASA guidelines suggest a max visibility range of `r round(distance_EU)` ft, the use of visual acuity presents a recommended distance of no more than `r max(max_D)` ft with the limit of the average human's vision at `r max(bad_D)` ft.

## Interactive Example

```{=html}
<!--
  Inputs for dimension X, dimension Y, and Drone Type (Multirotor vs. Fixed-Wing)
  Adjust these controls as desired (sliders, numeric inputs, etc.).
-->
<div class="input-container">
  <div class="input-group">
    <label for="dimX"><i class="fas fa-arrows-alt-v"></i> Vertical (inches):</label>
    <input type="number" id="dimX" name="dimX" value="4.2" step="0.1" min="0" max="99999" placeholder="e.g., 4.2" oninput="updatePlot()" aria-describedby="dimX-help" />
    <small id="dimX-help">Enter the vertical height of the drone in inches.</small>
  </div>

  <div class="input-group">
    <label for="dimY"><i class="fas fa-arrows-alt-h"></i> Horizontal (inches):</label>
    <input type="number" id="dimY" name="dimY" value="11.3" step="0.1" min="0" max="99999" placeholder="e.g., 11.3" oninput="updatePlot()" aria-describedby="dimY-help" />
    <small id="dimY-help">Enter the horizontal width or length of the drone in inches.</small>
  </div>

  <div class="input-group">
    <label for="droneType"><i class="fas fa-drone"></i> Drone Type:</label>
    <select id="droneType" name="droneType" onchange="updatePlot()" aria-describedby="droneType-help">
      <option value="FALSE" selected>Multirotor (default)</option>
      <option value="TRUE">Fixed-Wing</option>
    </select>
    <small id="droneType-help">Select the type of drone.</small>
  </div>
</div>

<!-- Plot container -->
<div id="plot" style="width:100%; height:400px;"></div>

<script>
  // ---------------------------
  // 1. R -> JavaScript Conversion
  // ---------------------------

  // JS version of `calculateMinimumVisibility(size, alt, acuity)`
  // Replicates the "while" loop that increments `distance` until the angle is below the threshold.
  function calculateMinimumVisibility(size, alt, acuity) {
    // Convert inches to feet
    const xFeet = size[0] / 12;
    const yFeet = size[1] / 12;

    // Acuity in arc minutes -> radians
    const minT = (acuity / 60) * (Math.PI / 180);

    let theta_c = 1.0;
    let distance = 0.0;

    while (theta_c > minT) {
      distance += 2; // increment by 2 feet each loop

      // a = c(distance - y/2, alt + x/2)
      const a = [distance - yFeet / 2, alt + xFeet / 2];
      // b = c(distance + y/2, alt - x/2)
      const b = [distance + yFeet / 2, alt - xFeet / 2];

      // Dot product & norms
      const num1 = a[0] * b[0] + a[1] * b[1];
      const den1 =
        Math.sqrt(a[0] * a[0] + a[1] * a[1]) *
        Math.sqrt(b[0] * b[0] + b[1] * b[1]);

      theta_c = Math.acos(num1 / den1);
    }

    return distance;
  }

  // JS version of `calculateEASAVLOS(size, fixedWing)`
  function calculateEASAVLOS(size, fixedWing) {
    // Convert inches to feet
    const xFeet = size[0] / 12;
    const yFeet = size[1] / 12;
    const CD = Math.sqrt(xFeet * xFeet + yFeet * yFeet);

    const m2ft = 3.280839895; // meter to feet conversion
    let distance = 0;

    if (fixedWing) {
      distance = 490 * m2ft * CD + 30 * m2ft;
    } else {
      distance = 327 * m2ft * CD + 20 * m2ft;
    }

    return distance;
  }

  // ---------------------------
  // 2. Main Update/Plot Routine
  // ---------------------------
  function updatePlot() {
    // Retrieve user inputs
    const dimX = parseFloat(document.getElementById("dimX").value);
    const dimY = parseFloat(document.getElementById("dimY").value);
    const droneType = document.getElementById("droneType").value === "TRUE";

    // Prepare inputs for our JS functions
    const size = [dimX, dimY];
    const maxAlt = 400; // we loop from altitude = 1 to 400 (feet)
    
    // Different acuities
    const acuitySafe = 6;
    const acuityMax = 3;
    const acuityBad = 1;

    // Arrays to store results for each altitude
    const safeD = [];
    const maxD = [];
    const badD = [];

    // alt axis from 1..400 for plotting
    const altitudes = Array.from({ length: maxAlt }, (_, i) => i + 1);

    // Compute distances for each altitude
    for (let alt = 1; alt <= maxAlt; alt++) {
      safeD.push(calculateMinimumVisibility(size, alt, acuitySafe));
      maxD.push(calculateMinimumVisibility(size, alt, acuityMax));
      badD.push(calculateMinimumVisibility(size, alt, acuityBad));
    }

    // Compute the EASA guideline distance
    const distanceEU = calculateEASAVLOS(size, droneType);

    // Build Plotly data
    const traceSafe = {
      x: safeD,
      y: altitudes,
      type: "scatter",
      mode: "lines",
      name: "Safe Distance",
      line: { color: "green" }
    };
    const traceMax = {
      x: maxD,
      y: altitudes,
      type: "scatter",
      mode: "lines",
      name: "Max Distance",
      line: { color: "blue" }
    };
    const traceBad = {
      x: badD,
      y: altitudes,
      type: "scatter",
      mode: "lines",
      name: "Limit of Human Vision",
      line: { color: "red" }
    };
    const traceEU = {
      x: [distanceEU, distanceEU],
      y: [0, maxAlt],
      type: "scatter",
      mode: "lines",
      name: "EASA Guidelines",
      line: { color: "black", dash: "dash", width: 2 }
    };

    // Plotly Layout
    const layout = {
      title: "Visual Line of Sight Estimator",
      xaxis: { title: "Minimum Distance (feet)",
               rangemode: "tozero"  // always start at 0
              },
      yaxis: { title: "Altitude (feet)", range: [0, maxAlt] },
      legend: {
        orientation: "h",
        x: 0.5,
        y: -0.2,
        xanchor: "center"
      },
      margin: { l: 50, r: 50, b: 100, t: 50 }
    };

    // Render/Update the Plotly plot
    Plotly.newPlot("plot", [traceSafe, traceMax, traceBad, traceEU], layout);
  }

  // Initialize the plot on page load
  document.addEventListener("DOMContentLoaded", updatePlot);
</script>
```
:::

## Methodology

Tested 4 drones

-   DJI Mini 2
-   Autel Evo II Pro v3
-   Freefly Astro
-   AgEagle eBee

For the multi-rotor drones, conducted both a vertical and horizontal test. For the eBee, only a horizontal test.

Vertical Test

-   Vertical Up/Down at a measured point

Horizontal Test

-   Grid Pattern or Autonomous flight at a consistent altitude

### Measurement Issues

GPS can be inaccurate, timing can be inaccurate, measurements can be inaccurate.

While we strived to ensure accurate measurements, it must be noted that there may be inaccuracies.

What are the GPS accuracies? How does timing affect results?

GPS errors are independent of distance, the further away the drone is, the less it matters. Calculations are more sensitive to horizontal errors than vertical errors.

At roughly 600 ft, it's about 0.03 arc minutes per foot. Timestamps could be off by seconds, travelling at 25 ft/sec - being off by 3 seconds could mean an inaccuracy of an arc minute or greater if travelling to/from the observer. Devices are synchronized manually prior to each flight and compared against <https://www.time.gov/> for validation.

## Experimental Results

```{r}
# Reading data from an Excel file
experimental_data <- read_excel("./data_clean.xlsx")
experimental_data <- experimental_data[experimental_data$Lat_Alt >= 10, ]

# Assuming dataclean is a data frame
acuity_score <- experimental_data$Score
altitude <- experimental_data$Lat_Alt
visibility <- experimental_data$Observation

visibility <- as.factor(visibility)
levels(visibility) <- c(0, 1)  # Ensure binary levels are 0 and 1

observers <- experimental_data$Observer
```

### Visibility by Estimated Acuity

```{r}


# Create bins for acuity_score
visibility_bins <- experimental_data %>%
  mutate(
    Bin = cut(
      acuity_score,
      breaks = c(seq(0, 10, by = 0.5), Inf),
      right = FALSE, # Include left endpoint but exclude the right
      labels = c(
        paste(seq(0, 9.5, by = 0.5), seq(0.5, 10, by = 0.5), sep = "-"),
        ">10"
      )
    )
  )

# Calculate percentage of visibility being TRUE for each bin
bin_summary <- visibility_bins %>%
  group_by(Bin) %>%
  summarise(
    Total = n(), # Total number of observations in each bin
    TrueCount = sum(Observation == TRUE), # Count of TRUE visibility
    PercentTrue = 100 * TrueCount / Total # Percentage of TRUE visibility
  )

# Display the results



p <- ggplot(bin_summary, aes(x = Bin, y = PercentTrue)) +
  geom_bar(stat = "identity", fill = "lightblue", color = "darkblue") +
  labs(
    title = "Percentage of Self-Reported Visibility by Estimated Acuity",
    x = "Acuity (arcminutes)",
    y = "Percent Visibility"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom"
        ) +
  scale_x_discrete(limits = rev(levels(bin_summary$Bin))) + # Reverse the order of bins
  scale_y_continuous(limits = c(0, 100), expand = c(0, 0)) + # Extend y-axis to 100%
  # Add the vertical dashed line with a legend
  geom_vline(
    aes(xintercept = length(levels(Bin)) - 1.5, linetype = "Threshold Line"),
    color = "red",
    size = 1,
    show.legend = TRUE
  ) +
  # Define linetype for the legend
  scale_linetype_manual(
    name = "Legend",
    values = c("Threshold Line" = "dashed"),
    guide = guide_legend(override.aes = list(color = "red"))
  )

# Convert the ggplot to an interactive plot with plotly
interactive_plot <- ggplotly(p)

# Adjust the layout to add padding for the title
interactive_plot <- interactive_plot %>%
  layout(
    margin = list(t = 100),  # Add 100px margin to the top
    title = list(text = "<b>Percentage of Self-Reported Visibility by Estimated Acuity</b>",  # Bold title
                 x = 0.5,  # Center align the title
                 xanchor = "center",
                 yanchor = "top")
  )

# Display the interactive plot
interactive_plot

```

The experimental results show a clear pattern of reduced self-reported visibility when the visual acuity is less than 3 arc minutes, with 0 self-reported visibility when less than 1 arc minute, roughly assumed to be the limit of human vision.

This data was evaluated with a fixed-wing drone, the AgEagle eBee.

### Finding the Optimal Threshold

Using Recveiver Operator Characteristic Curve (ROC) and Youden's Index to find the optimal thresholds. Optimal threshold is the arc minutes for a binary predictor, the area under the curve (AUC) is a measure of the predictive performance for that threshold. An AUC above 0.5 is indicative that the threshold is better than random guessing.

```{r}
# Get unique observers
uniqueObservers <- unique(observers)

# Initialize an empty data frame to store results
results <- data.frame(
  Observer = character(),
  OptimalThreshold = numeric(),
  AUC = numeric(),
  stringsAsFactors = FALSE
)

# Loop through each observer
for (obs in uniqueObservers) {
  # Get the indices for the current observer
  obsIdx <- observers == obs
  
  # Compute ROC curve using the pROC package
  roc <- roc(visibility[obsIdx], acuity_score[obsIdx], levels = c(0, 1))
  AUC <- auc(roc)
  
  # Find Optimal Threshold (Youden's Index)
  youdens_index <- roc$sensitivities + roc$specificities - 1
  optimalIdx <- which.max(youdens_index)
  optimalThreshold <- roc$thresholds[optimalIdx]
  
  # Store the result in the data frame
  results <- rbind(results, data.frame(
    Observer = obs,
    OptimalThreshold = optimalThreshold,
    AUC = AUC
  ))
  
}
# Print the results
print(results)

# Create a boxplot for optimal thresholds
ggplot(results, aes(x = "", y = OptimalThreshold)) +
  geom_boxplot(fill = "lightblue", color = "darkblue") +
  labs(
    title = "Variation in Optimal Thresholds",
    x = "",  # No label for x-axis since it's a single group
    y = "Optimal Threshold"
  ) +
  theme_minimal()
```

Accounting for variations in different observers, the mean is `{r} mean(results$OptimalThreshold)` arc minutes, suggesting that `{r} round(mean(results$OptimalThreshold))` arc minutes is an acceptable threshold.

### Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
d = calculateMinimumVisibility(c(4.2,11.3),50,6)
d
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
